<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sbblog | sharedInstance]]></title>
  <link href="http://sharedinstance.net/categories/sbblog/atom.xml" rel="self"/>
  <link href="http://sharedinstance.net/"/>
  <updated>2014-12-28T16:05:03+10:30</updated>
  <id>http://sharedinstance.net/</id>
  <author>
    <name><![CDATA[sharedInstance]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up SSH via USB connection]]></title>
    <link href="http://sharedinstance.net/2014/12/setting-up-ssh-via-usb-connection/"/>
    <updated>2014-12-28T15:03:02+10:30</updated>
    <id>http://sharedinstance.net/2014/12/setting-up-ssh-via-usb-connection</id>
    <content type="html"><![CDATA[<p>When developing tweaks (or making themes, for that matter), it is often annoying to wait for files to copy (and commands to execute) over Wi-Fi - it tends to be very slow and sometimes unreliable, and one must keep track of IP addresses and such (even if they use a hosts file to map custom hostnames) in order to accomplish it. This annoyance can be greatly relieved by creating a local tunnel over a USB connection to the target device, and using that to SSH to the device much more quickly and reliably. In this tutorial, we will cover how to set up your Mac (not PC, sorry - I am not knowledgable enough to write on this) so that port 2222 is forwarded to port 22 on whatever device is plugged in. This service will be started automatically and will run in the background at all times, out of sight and out of mind.</p>

<!--more-->


<p>First things first, download the client from its <a href="https://code.google.com/p/iphonetunnel-usbmuxconnectbyport/downloads/detail?name=itnl_rev8.zip">download page</a> (note that you will need iTunes 10.5 or later for the client to work). Extract this zip, and move the extracted contents to <code>~/Library/Application Support/usbmuxd/</code> (or something else, if you wish, but make sure to change the path in the plist accordingly) - both <code>tunl</code> and <code>libmd.dylib</code>.</p>

<p>Now, create a new file named <code>net.sharedinstance.tcprelay.plist</code> in <code>~/Library/LaunchAgents</code>. Inside this file, put the following:</p>

<pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;net.sharedinstance.tcprelay&lt;/string&gt;
    &lt;key&gt;KeepAlive&lt;/key&gt;
    &lt;dict&gt;
        &lt;key&gt;NetworkState&lt;/key&gt;
        &lt;true/&gt;
    &lt;/dict&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/Users/USER/Library/Application Support/usbmuxd/itnl&lt;/string&gt;
        &lt;string&gt;--iport&lt;/string&gt;
        &lt;string&gt;22&lt;/string&gt;
        &lt;/string&gt;--lport&lt;/string&gt;
        &lt;string&gt;2222&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>

<p>Be sure to replace USER above with your username (and if you put the executable elsewhere, make sure to change the first item in the ProgramArguments array to reflect that). Make sure that the itnl executable is, well, executable. Then, give the plist appropriate permissions - <code>chmod 0644 ~/Library/LaunchAgents/net.sharedinstance.tcprelay.plist</code>, and load this launch agent we have created - <code>launchctl load ~/Library/LaunchAgents/net.sharedinstance.tcprelay.plist</code>.</p>

<p>From now on, the relay we have set up will always be running the background once you log in. Try it out now with <code>ssh -p 2222 mobile@localhost</code>.</p>

<p>If you use this with multiple devices, you&rsquo;ll notice a problem: you&rsquo;ll get a scary host key changed warning:</p>

<pre><code>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
</code></pre>

<p>The trick to avoiding this is to set the known hosts file to <code>/dev/null</code> when you&rsquo;re connecting to localhost:2222. Create <code>~/.ssh/config</code> if you don&rsquo;t already have it and add the following:</p>

<pre><code>Host local
    User root
    HostName localhost
    Port 2222
    StrictHostKeyChecking no
    UserKnownHostsFile=/dev/null
</code></pre>

<p>You can now use <code>ssh local</code> no matter what device is plugged in.</p>

<p>To use this with Theos, you can export the IP to the host alias and the port to 2222:</p>

<pre><code class="bash">export THEOS_DEVICE_IP=local THEOS_DEVICE_PORT=2222
</code></pre>

<p>It would be ideal to also put this in your shell&rsquo;s profile script (<code>~/.bash_profile</code>, <code>~/.zshrc</code>, etc) so it&rsquo;s set by default and you don&rsquo;t have to worry about it.</p>

<p>Plug in a jailbroken iOS device, copy your SSH key to it if you haven&rsquo;t already&hellip;</p>

<pre><code class="bash">ssh local 'mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub
</code></pre>

<p>&hellip;and enjoy the blazingly fast transfer speed! Isn&rsquo;t this much better than boring ol&#8217; Wi-Fi?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doing tweak settings the right way]]></title>
    <link href="http://sharedinstance.net/2014/11/settings-the-right-way/"/>
    <updated>2014-11-26T18:02:34+10:30</updated>
    <id>http://sharedinstance.net/2014/11/settings-the-right-way</id>
    <content type="html"><![CDATA[<p>You might have noticed that tweak settings have suddenly started acting different in iOS 8. This is because the <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man8/cfprefsd.8.html"><code>cfprefsd</code></a> concept from OS X (as long ago as in 10.8 Mountain Lion) has been brought across to iOS 8. When you change a setting now, the dictionary is no longer committed to disk immediately - rather, it&rsquo;s kept in memory by <code>cfprefsd</code> and only flushed to disk when the appropriate process (or <code>cfprefsd</code> itself) terminates. So with that in mind, how do you manage settings on iOS 8 now?</p>

<!--more-->


<p>It&rsquo;s actually really simple and I&rsquo;d argue a thousand times better than the hack all of us were using before this. First, you need to keep an instance of NSUserDefaults hanging around, and register your default preferences:</p>

<pre><code class="objc">static NSString *const kHBCBPreferencesDomain = @"ws.hbang.cobalia";
static NSString *const kHBCBPreferencesEnabledKey = @"Enabled";
static NSString *const kHBCBPreferencesSwitchesKey = @"Switches";
static NSString *const kHBCBPreferencesSectionLabelKey = @"SectionLabel";
static NSString *const kHBCBPreferencesSwitchLabelsKey = @"SwitchLabels";

NSUserDefaults *userDefaults;

%init {
    userDefaults = [[NSUserDefaults alloc] _initWithSuiteName:kHBCBPreferencesDomain container:[NSURL URLWithString:@"/var/mobile"]];

    [userDefaults registerDefaults:@{
        kHBCBPreferencesEnabledKey: @YES,
        kHBCBPreferencesSwitchesKey: @[ /* ... */ ]
        kHBCBPreferencesSectionLabelKey: @YES,
        kHBCBPreferencesSwitchLabelsKey: @YES
    }]
}
</code></pre>

<p>You&rsquo;ll probably need to define this private init method in a category interface like so:</p>

<pre><code class="objc">@interface NSUserDefaults (Private)

- (instancetype)_initWithSuiteName:(NSString *)suiteName container:(NSURL *)container;

@end
</code></pre>

<p>I use constants for strings that shouldn&rsquo;t ever change - you don&rsquo;t need to but I&rsquo;d recommend it.</p>

<p>Now, it&rsquo;s as simple as a <code>[userDefaults boolForKey:@"Enabled"]</code> to grab a boolean, or <code>objectForKey:</code> for an Objective-C object, or any of the other methods <a href="https://developer.apple.com/Library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSUserDefaults_Class/index.html">the class supports</a>.</p>

<p>Easy! If you notice, you don&rsquo;t even need to watch for a traditional Darwin notification, nor do you need to define <code>PostNotification</code> on your preferences specifiers. The important thing to note is you need to directly call the methods on <code>NSUserDefaults</code> where ever you need to get a preference value in your code. You shouldn&rsquo;t store the preferences in separate global variables as you might have done traditionally since then you need a Darwin notification and a callback function to update them - ruining the simplicity of this solution.</p>

<p>But what about libraries like AppList or Flipswitch whose preferences API still write directly to the plist? The easiest thing you can do is a quick little trick to pass that back to <code>cfprefsd</code> to keep in memory. This is how I do it in <a href="https://github.com/hbang/Cobalia/blob/master/Tweak.xm">Cobalia</a>:</p>

<pre><code class="objc">void HBCBPreferencesChanged() {
    NSDictionary *preferences = [NSDictionary dictionaryWithContentsOfFile:[[[NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES)[0] stringByAppendingPathComponent:@"Preferences"] stringByAppendingPathComponent:kHBCBPreferencesDomain] stringByAppendingPathExtension:@"plist"]];

    if (preferences[kHBCBPreferencesSwitchesKey]) {
        [userDefaults setObject:preferences[kHBCBPreferencesSwitchesKey] forKey:kHBCBPreferencesSwitchesKey];
    }
}

%ctor {
    HBCBPreferencesChanged();
    CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(), NULL, (CFNotificationCallback)HBCBPreferencesChanged, CFSTR("ws.hbang.cobalia/ReloadPrefs"), NULL, kNilOptions);
}
</code></pre>

<p>Obviously you&rsquo;ll also need to set the appropriate key in your preference specifiers for a Darwin notification to be posted with the name you provide.</p>

<p>If you&rsquo;d like to see what else people are using for their tweaks, there are a few others you can explore that are listed on the iPhone Dev Wiki&rsquo;s <a href="http://iphonedevwiki.net/index.php/Updating_extensions_for_iOS_8#Preference_saving">updating extensions for iOS 8</a> article. To me, this is the most simple and elegant, and almost exactly what you&rsquo;d ideally be using anyway in a standard iOS or OS X application - but you&rsquo;re of course allowed to use whichever looks best to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding simple toggles in the Settings root list]]></title>
    <link href="http://sharedinstance.net/2014/04/settings-root-toggles/"/>
    <updated>2014-04-18T11:04:22+09:30</updated>
    <id>http://sharedinstance.net/2014/04/settings-root-toggles</id>
    <content type="html"><![CDATA[<p>I just wanted to post a quick trick you can use to show a toggle in the root Settings list view.</p>

<p>If you generate a new preference bundle project with NIC and open <code>entry.plist</code>, you&rsquo;ll find this:</p>

<!--more-->


<pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;entry&lt;/key&gt;
    &lt;dict&gt;
        &lt;key&gt;bundle&lt;/key&gt;
        &lt;string&gt;TypeStatus&lt;/string&gt;
        &lt;key&gt;cell&lt;/key&gt;
        &lt;string&gt;PSLinkCell&lt;/string&gt;
        &lt;key&gt;detail&lt;/key&gt;
        &lt;string&gt;HBTSListController&lt;/string&gt;
        &lt;key&gt;icon&lt;/key&gt;
        &lt;string&gt;icon.png&lt;/string&gt;
        &lt;key&gt;isController&lt;/key&gt;
        &lt;true/&gt;
        &lt;key&gt;label&lt;/key&gt;
        &lt;string&gt;TypeStatus&lt;/string&gt;
    &lt;/dict&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>

<p>Indeed, the cells shown in the root of Settings courtesy of PreferenceLoader are customizable. You could slap your whole settings panel there if you wanted (but that&rsquo;s clearly not a good idea). What you <em>could</em> do, though, is use it for tweaks whose settings consist of nothing more than an &ldquo;enabled&rdquo; toggle.</p>

<pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;entry&lt;/key&gt;
    &lt;dict&gt;
        &lt;key&gt;cell&lt;/key&gt;
        &lt;string&gt;PSSwitchCell&lt;/string&gt;
        &lt;key&gt;default&lt;/key&gt;
        &lt;true/&gt;
        &lt;key&gt;defaults&lt;/key&gt;
        &lt;string&gt;ws.hbang.typestatus&lt;/string&gt;
        &lt;key&gt;icon&lt;/key&gt;
        &lt;string&gt;TypeStatus.png&lt;/string&gt;
        &lt;key&gt;label&lt;/key&gt;
        &lt;string&gt;TypeStatus&lt;/string&gt;
        &lt;key&gt;key&lt;/key&gt;
        &lt;string&gt;Enabled&lt;/string&gt;
        &lt;key&gt;PostNotification&lt;/key&gt;
        &lt;string&gt;ws.hbang.typestatus/ReloadPrefs&lt;/string&gt;
    &lt;/dict&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>

<p>The icon can be dropped at <code>/Library/PreferenceLoader/Preferences/TypeStatus.png</code>. Unfortunately for themers, this means it can&rsquo;t be themed with WinterBoard.</p>

<p>Ok, that&rsquo;s easy enough, but I mention this because if one or two tweaks did this, it would look pretty odd. If more tweaks do this, it&rsquo;ll look completely normal. And, as Ryan Petrich noted in his <a href="http://rpetri.ch/wwjc2014/rpetrich_wwjc2014.pdf">WWJC talk</a> a few days ago, every tweak should have settings - even if it&rsquo;s just a single on/off switch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging memory issues in Substrate tweaks]]></title>
    <link href="http://sharedinstance.net/2014/02/debugging-memory-issues/"/>
    <updated>2014-02-10T00:00:00+10:30</updated>
    <id>http://sharedinstance.net/2014/02/debugging-memory-issues</id>
    <content type="html"><![CDATA[<p>Memory issues in MobileSubstrate tweaks are generally not very easy to debug. In the following text I&rsquo;m explaining some useful tools for finding overreleases and leaks in your own tweaks.</p>

<!--more-->


<p>One useful trick is to override <code>- (void)dealloc</code> in your subclasses and write a message to the syslog; that way you can make sure your objects are actually getting freed after usage. If dealloc is not getting called, you probably need to release that object once more. Keep in mind you should remove those logs for release builds of your tweaks. An easy way to do this is by adding this:</p>

<pre><code class="objc">#ifndef DEBUG
#define NSLog
#endif
</code></pre>

<p>On top of your tweaks makefile, add <code>DEBUG=1</code> to enable NSLogs, set it to zero or remove the line to disable all logs. You can also pass it to make at the command line, for instance: <code>make package install DEBUG=1</code>.</p>

<p>Another extremely useful trick if you experience crashes from use-after-free issues is to enable zombie objects. To enable those in any process you want (e.x. SpringBoard), ssh into your device, attach to the process with <code>cycript -p processname</code> first. Then declare _CFEnableZombies() in cycript like so:</p>

<pre><code class="javascript">_CFEnableZombies = new Functor(dlsym(RTLD_DEFAULT, "_CFEnableZombies"), "v");
</code></pre>

<p>Now you can enable zombie objects simply by calling <code>_CFEnableZombies()</code>. Open up a syslog and keep and eye on it while the memory crash happens. You’ll see a message like this one:</p>

<pre><code class="plain">&lt;Error&gt;: *** -[UIWindow methodSignatureForSelector:]: message sent to deallocated instance 0x162a7730`
</code></pre>

<p>There we go! Now just search for the (in this example) <code>methodSignatureForSelector:</code> in your code and fix the memory crash!</p>

<p>Happy debugging!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Important: Update your tweaks to support arm64]]></title>
    <link href="http://sharedinstance.net/2013/12/how-to-support-arm64/"/>
    <updated>2013-12-24T00:00:00+10:30</updated>
    <id>http://sharedinstance.net/2013/12/how-to-support-arm64</id>
    <content type="html"><![CDATA[<p>The iPhone 5s, iPad Air and iPad mini (2nd generation) both run on a completely new processor architecture: arm64. If you haven&rsquo;t heard, this architecture is 64-bit, unlike the previous 32-bit architectures (armv6, armv7 and armv7s). Of course, these devices are still backwards compatible with the 32-bit architectures, but for 64-bit processes, <strong>dynamic libraries not compiled for arm64 will not be loaded into them.</strong></p>

<!--more-->


<p>However, updating your tweak to work on arm64 is fairly simple. It does come with one caveat, however: you are required to compile with the iOS 7.0 or newer SDK. If you&rsquo;re not using Xcode 5 or newer to compile your tweaks, you must do so in order to fully support these devices.</p>

<p>Unfortunately, if you&rsquo;re not using the official toolchain (included with Xcode) to build your tweaks, it is currently not possible to support arm64, since Apple is yet to release the source code for the open-source tools included with the Xcode 5 toolchain.</p>

<p>Before you start, be sure to <a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaTouch64BitGuide/ConvertingYourAppto64-Bit/ConvertingYourAppto64-Bit.html">update your code for arm64</a>. Please also remember that Substrate is currently not updated for arm64, so you may want to hold off on doing this if you don&rsquo;t have an arm64 device to test with.</p>

<h2>The easy way</h2>

<p><strong style="font-size: 1.05em;">(If you don&rsquo;t need to support iOS 4.2.1 or older)</strong></p>

<p>The easiest way to fix this issue is simply to start using the iOS 7 SDK, and force theos to build your tweaks for both armv7 and arm64. If you have Xcode 5, you&rsquo;ve most likely already completed the first part (if not, head to the App Store and update Xcode!). The second part is still fairly easy: open your project&rsquo;s makefile and add this line above the first <code>include</code>:</p>

<pre><code class="make">ARCHS = armv7 arm64
</code></pre>

<p>Finally, download <a href="http://cdn.hbang.ws/dl/libsubstrate_arm64.dylib">this build of the libsubstrate.dylib stub</a> (contains armv6/armv7/armv7s/arm64 as well as i386 for OS X and x86_64 for iOS Simulator) and replace the existing file at $THEOS/lib/libsubstrate.dylib. That&rsquo;s it!</p>

<h2>The slightly more complex way</h2>

<p>It may not be viable to compile only against the iOS 7 SDK, since that might mean dropping support for iOS versions before 4.3.  If you have a preference bundle, wee app, or anything else that is loaded into an arm64 process, don&rsquo;t forget that you&rsquo;ll need to perform the same thing to its binaries too. There are tons of goodies available on <a href="http://iphonedevwiki.net/index.php/Updating_extensions_for_iOS_7#Tweaks_that_do_need_iOS_4.2.1_and_below_compatibility">the dev wiki</a> for this situation - and also has tips for issues that you may come across.</p>
]]></content>
  </entry>
  
</feed>
